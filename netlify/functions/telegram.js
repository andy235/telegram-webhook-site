exports.handler = async (event, context) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞
  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      body: JSON.stringify({ error: 'Method Not Allowed' }),
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*'
      }
    };
  }

  // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
  const CHAT_ID = process.env.TELEGRAM_CHAT_ID;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ chat ID
  if (!BOT_TOKEN || !CHAT_ID) {
    return {
      statusCode: 500,
      body: JSON.stringify({ error: 'Missing Telegram credentials' }),
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*'
      }
    };
  }

  try {
    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    const data = JSON.parse(event.body);
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–∏–ø–∞ —Ç–æ–ø–ª–∏–≤–∞
    const formatFuelType = (type) => {
      const types = {
        'summer': '–î–¢ –ª–µ—Ç–Ω–µ–µ',
        'winter': '–î–¢ –∑–∏–º–Ω–µ–µ',
        'arctic': '–î–¢ –∞—Ä–∫—Ç–∏—á–µ—Å–∫–æ–µ',
        'inter': '–î–¢ –º–µ–∂—Å–µ–∑–æ–Ω–Ω–æ–µ'
      };
      return types[type] || type;
    };

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const message = `üöõ <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –î–û–°–¢–ê–í–ö–£ –î–ò–ó–¢–û–ü–õ–ò–í–ê</b>

üìã <b>–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞:</b> ${formatFuelType(data.fuel_type || data['fuel-type'])}
‚õΩ <b>–û–±—ä–µ–º:</b> ${Number(data.volume).toLocaleString()} –ª
üìç <b>–ê–¥—Ä–µ—Å:</b> ${data.address}
üìÖ <b>–î–∞—Ç–∞:</b> ${new Date(data.date).toLocaleDateString('ru-RU')}
üïê <b>–í—Ä–µ–º—è:</b> ${data.time}
üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> ${data.company}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${data.phone}${data.comment ? `\nüí≠ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${data.comment}` : ''}

‚è∞ <i>–ó–∞—è–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: ${new Date().toLocaleString('ru-RU')}</i>`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    const telegramResponse = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: CHAT_ID,
        text: message,
        parse_mode: 'HTML'
      }),
    });

    const telegramData = await telegramResponse.json();

    if (telegramData.ok) {
      return {
        statusCode: 200,
        body: JSON.stringify({ success: true, message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!' }),
        headers: {
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*'
        }
      };
    } else {
      console.error('Telegram API Error:', telegramData);
      return {
        statusCode: 500,
        body: JSON.stringify({ success: false, error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram' }),
        headers: {
          'Content-Type': 'application/json',
          'Access-Control-Allow-Origin': '*'
        }
      };
    }

  } catch (error) {
    console.error('Function Error:', error);
    return {
      statusCode: 500,
      body: JSON.stringify({ success: false, error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }),
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*'
      }
    };
  }
};
