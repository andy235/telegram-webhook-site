exports.handler = async (event, context) => {
  // CORS headers
  const headers = {
    'Content-Type': 'application/json',
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type',
    'Access-Control-Allow-Methods': 'POST, OPTIONS'
  };

  // Handle preflight requests
  if (event.httpMethod === 'OPTIONS') {
    return {
      statusCode: 200,
      headers,
      body: ''
    };
  }

  // Only allow POST requests
  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      headers,
      body: JSON.stringify({ error: 'Method Not Allowed' })
    };
  }

  try {
    // Get environment variables
    const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
    const CHAT_ID = process.env.TELEGRAM_CHAT_ID;

    // Check if credentials exist
    if (!BOT_TOKEN || !CHAT_ID) {
      console.error('Missing credentials:', { 
        hasToken: !!BOT_TOKEN, 
        hasChatId: !!CHAT_ID 
      });
      
      return {
        statusCode: 500,
        headers,
        body: JSON.stringify({ 
          success: false, 
          error: 'Missing Telegram credentials' 
        })
      };
    }

    // Parse request body
    let data;
    try {
      data = JSON.parse(event.body || '{}');
    } catch (parseError) {
      console.error('JSON parse error:', parseError);
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({ 
          success: false, 
          error: 'Invalid JSON data' 
        })
      };
    }

    // Check required fields
    const requiredFields = ['fuel-type', 'volume', 'address', 'date', 'time', 'company', 'phone'];
    const missingFields = requiredFields.filter(field => !data[field]);
    
    if (missingFields.length > 0) {
      console.error('Missing fields:', missingFields);
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({ 
          success: false, 
          error: 'Missing required fields: ' + missingFields.join(', ')
        })
      };
    }

    // Format fuel type
    const formatFuelType = (type) => {
      const types = {
        'summer': '–î–¢ –ª–µ—Ç–Ω–µ–µ',
        'winter': '–î–¢ –∑–∏–º–Ω–µ–µ',
        'arctic': '–î–¢ –∞—Ä–∫—Ç–∏—á–µ—Å–∫–æ–µ',
        'inter': '–î–¢ –º–µ–∂—Å–µ–∑–æ–Ω–Ω–æ–µ'
      };
      return types[type] || type;
    };

    // Format date
    const formatDate = (dateString) => {
      try {
        return new Date(dateString).toLocaleDateString('ru-RU');
      } catch (error) {
        return dateString;
      }
    };

    // Format volume
    const formatVolume = (volume) => {
      try {
        return Number(volume).toLocaleString('ru-RU');
      } catch (error) {
        return volume;
      }
    };

    // Create message
    const message = `üöõ <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –î–û–°–¢–ê–í–ö–£ –î–ò–ó–¢–û–ü–õ–ò–í–ê</b>

üìã <b>–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞:</b> ${formatFuelType(data['fuel-type'])}
‚õΩ <b>–û–±—ä–µ–º:</b> ${formatVolume(data.volume)} –ª
üìç <b>–ê–¥—Ä–µ—Å:</b> ${data.address}
üìÖ <b>–î–∞—Ç–∞:</b> ${formatDate(data.date)}
üïê <b>–í—Ä–µ–º—è:</b> ${data.time}
üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> ${data.company}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${data.phone}${data.comment ? `\nüí≠ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${data.comment}` : ''}

‚è∞ <i>–ó–∞—è–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: ${new Date().toLocaleString('ru-RU')}</i>`;

    // Send to Telegram
    const telegramUrl = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;
    
    const telegramResponse = await fetch(telegramUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: CHAT_ID,
        text: message,
        parse_mode: 'HTML'
      }),
    });

    const telegramData = await telegramResponse.json();

    if (telegramData.ok) {
      console.log('Message sent successfully');
      return {
        statusCode: 200,
        headers,
        body: JSON.stringify({ 
          success: true, 
          message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!' 
        })
      };
    } else {
      console.error('Telegram API Error:', telegramData);
      return {
        statusCode: 500,
        headers,
        body: JSON.stringify({ 
          success: false, 
          error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: ' + (telegramData.description || 'Unknown error')
        })
      };
    }

  } catch (error) {
    console.error('Function Error:', error);
    return {
      statusCode: 500,
      headers,
      body: JSON.stringify({ 
        success: false, 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + error.message 
      })
    };
  }
};
